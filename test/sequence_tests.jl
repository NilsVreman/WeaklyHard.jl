module SequenceTests

using Test
using WeaklyHard

##############################
### Generate all sequences ###
##############################

function generate_all_seq(k)
    return [(1 << k) | i for i in 0:2^k-1]
end # function

function generate_all_valid(lambda::T, seqs::Vector{R}, k) where {T <: Constraint, R <: Integer} 
    IntType = BigInt
    if k + 1 < 8
        IntType = Int8
    elseif k + 1 < 16
        IntType = Int16
    elseif k + 1 < 32
        IntType = Int32
    elseif k + 1 < 64
        IntType = Int64
    end
    cmp_w = IntType(2^k - 1)
    return Set{IntType}(map(x -> IntType(x) & IntType(cmp_w), filter(x -> is_satisfied(lambda, x), seqs)))
end # function
function generate_all_valid(Lambda::Set{T}, seqs::Vector{R}, k) where {T <: Constraint, R <: Integer} 
    IntType = BigInt
    if k + 1 < 8
        IntType = Int8
    elseif k + 1 < 16
        IntType = Int16
    elseif k + 1 < 32
        IntType = Int32
    elseif k + 1 < 64
        IntType = Int64
    end
    cmp_w = IntType(2^k - 1)
    return Set{IntType}(map(x -> IntType(x) & IntType(cmp_w), filter(x -> is_satisfied(Lambda, x), seqs)))
end # function

##########################
### All Sequence tests ###
##########################

k_max = 15

@testset "Test all sequences generated by automaton - Not RowHitConstraint" begin

    for k in 1:k_max

        IntType = BigInt
        if k < 8
            IntType = Int8
        elseif k < 16
            IntType = Int16
        elseif k < 32
            IntType = Int32
        elseif k < 64
            IntType = Int64
        end

        all_seqs    = generate_all_seq(k)

        for x in 0:k
            lambda      = AnyMissConstraint(x, k)
            all_valid   = generate_all_valid(lambda, all_seqs, k)
            g           = build_automaton(lambda)
            all_g_seq   = all_sequences(g, k)
            @test isempty(setdiff(all_valid, all_g_seq))
            @test isempty(setdiff(all_g_seq, all_valid))

            lambda      = AnyHitConstraint(x, k)
            all_valid   = generate_all_valid(lambda, all_seqs, k)
            g           = build_automaton(lambda)
            all_g_seq   = all_sequences(g, k)
            @test isempty(setdiff(all_valid, all_g_seq))
            @test isempty(setdiff(all_g_seq, all_valid))

            if x < k
                lambda      = RowMissConstraint(x)
                all_valid   = generate_all_valid(lambda, all_seqs, k)
                g           = build_automaton(lambda)
                all_g_seq   = all_sequences(g, k)
                @test isempty(setdiff(all_valid, all_g_seq))
                @test isempty(setdiff(all_g_seq, all_valid))
            end
        end # for
    end # for
end # testset

@testset "Test all sequences generated by automaton - Only RowHitConstraint" begin

    for k in 1:k_max

        IntType = BigInt
        if 2*k + 2 < 8
            IntType = Int8
        elseif 2*k + 2 < 16
            IntType = Int16
        elseif 2*k + 2 < 32
            IntType = Int32
        elseif 2*k + 2 < 64
            IntType = Int64
        end

        all_seqs    = generate_all_seq(k)

        for x in 0:ceil(k/2)
            lambda      = RowHitConstraint(x, k)
            all_valid   = generate_all_valid(lambda, all_seqs, k)
            g           = build_automaton(lambda)
            all_g_seq   = all_sequences(g, k)
            @test isempty(setdiff(all_valid, all_g_seq))
            @test isempty(setdiff(all_g_seq, all_valid))
        end # for
    end #for
end # testset

@testset "Test all sequences generated by automaton - Sets of All but RowHitConstraint" begin

    k       = k_max
    n_tests = 100
    n_cstr  = 4
    constraint_names = ["AnyMissConstraint", "AnyHitConstraint", "RowMissConstraint"]

    all_seqs    = generate_all_seq(k)

    for n_c in 2:n_cstr
        for _ in 1:n_tests

            Lambda = Set{Constraint}()
            while length(Lambda) < n_c
                Lambda = Set{Constraint}()
                for _ in 1:n_c
                    lk = rand(1:k)
                    lx = rand(0:lk)
                    lambda_type = rand(constraint_names)
                    l = getfield(WeaklyHard, Symbol(lambda_type))(lx, lk) 
                    push!(Lambda, l)
                end # for
            end # while

            all_valid   = generate_all_valid(Lambda, all_seqs, k)
            g           = build_automaton(Lambda)
            minimize_automaton!(g)
            all_g_seq   = all_sequences(g, k)
            @test isempty(setdiff(all_valid, all_g_seq))
            @test isempty(setdiff(all_g_seq, all_valid))
            if !isempty(setdiff(all_valid, all_g_seq)) || !isempty(setdiff(all_g_seq, all_valid))
                println(Lambda)
            end
        end # for
    end # for
end # testset

@testset "Test all sequences generated by automaton - Only Sets of RowHitConstraint" begin

    k       = k_max
    n_tests = 100
    n_cstr  = 4

    all_seqs    = generate_all_seq(k)

    for n_c in 2:n_cstr
        for _ in 1:n_tests

            Lambda = Set{RowHitConstraint}()
            while length(Lambda) < n_c
                Lambda = Set{RowHitConstraint}()
                for _ in 1:n_c
                    lk = rand(1:k)
                    lx = rand(0:lk)
                    l = RowHitConstraint(lx, lk) 
                    push!(Lambda, l)
                end # for
            end # while

            all_valid   = generate_all_valid(Lambda, all_seqs, k)
            g           = build_automaton(Lambda)
            minimize_automaton!(g)
            all_g_seq   = all_sequences(g, k)
            @test isempty(setdiff(all_valid, all_g_seq))
            @test isempty(setdiff(all_g_seq, all_valid))
            if !isempty(setdiff(all_valid, all_g_seq)) || !isempty(setdiff(all_g_seq, all_valid))
                println(Lambda)
            end
        end # for
    end # for
end # testset

@testset "Test all sequences generated by automaton - Arbitrary sets" begin

    k       = k_max
    n_tests = 100
    n_cstr  = 4
    constraint_names = ["AnyMissConstraint", "AnyHitConstraint", "RowMissConstraint", "RowHitConstraint"]

    all_seqs    = generate_all_seq(k)

    for n_c in 2:n_cstr
        for _ in 1:n_tests

            Lambda = Set{Constraint}()
            while length(Lambda) < n_c
                Lambda = Set{Constraint}()
                for _ in 1:n_c
                    lk = rand(1:k)
                    lx = rand(0:lk)
                    lambda_type = rand(constraint_names)
                    l = getfield(WeaklyHard, Symbol(lambda_type))(lx, lk) 
                    push!(Lambda, l)
                end # for
            end # while

            all_valid   = generate_all_valid(Lambda, all_seqs, k)
            g           = build_automaton(Lambda)
            minimize_automaton!(g)
            all_g_seq   = all_sequences(g, k)
            @test isempty(setdiff(all_valid, all_g_seq))
            @test isempty(setdiff(all_g_seq, all_valid))
            if !isempty(setdiff(all_valid, all_g_seq)) || !isempty(setdiff(all_g_seq, all_valid))
                println(Lambda)
            end
        end # for
    end # for
end # testset

######################
### Sequence tests ###
######################

N = 200

@testset "Random sequence tests - AnyMissConstraint" begin
    n_max = 0
    for k in 1:k_max
        for x in 0:k
            lambda      = AnyMissConstraint(x, k)
            automaton   = build_automaton(lambda)
            for n in k_max:N
                seq         = random_sequence(automaton, n)
                @test is_satisfied(lambda, seq)
            end # for

            n_max       = max(n_max, length(automaton))
        end # for
    end # for
    println("Biggest automaton for AnyMissConstraint: $n_max")
end # testset
@testset "Random sequence tests - AnyHitConstraint" begin
    n_max = 0
    for k in 1:k_max
        for x in 0:k
            lambda      = AnyHitConstraint(x, k)
            automaton   = build_automaton(lambda)
            for n in k_max:N
                seq         = random_sequence(automaton, n)
                @test is_satisfied(lambda, seq)
            end # for

            n_max       = max(n_max, length(automaton))
        end # for
    end # for
    println("Biggest automaton for AnyHitConstraint: $n_max")
end # testset
@testset "Random sequence tests - RowMissConstraint" begin
    n_max = 0
    for k in 1:k_max
        for x in 0:k
            lambda      = RowMissConstraint(x, k)
            automaton   = build_automaton(lambda)
            for n in k_max:N
                seq         = random_sequence(automaton, n)
                @test is_satisfied(lambda, seq)
            end # for

            n_max       = max(n_max, length(automaton))
        end # for
    end # for
    println("Biggest automaton for RowMissConstraint: $n_max")
end # testset
@testset "Random sequence tests - RowHitConstraint" begin
    n_max = 0
    for k in 1:k_max
        for x in 0:k
            lambda      = RowHitConstraint(x, k)
            automaton   = build_automaton(lambda)
            for n in k_max:N
                seq         = random_sequence(automaton, n)
                @test is_satisfied(lambda, seq)
            end # for

            n_max       = max(n_max, length(automaton))
        end # for
    end # for
    println("Biggest automaton for RowHitConstraint: $n_max")
end # testset

end # module
